<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GardeningSystem.DataAccess</name>
    </assembly>
    <members>
        <member name="T:GardeningSystem.DataAccess.Communication.AesTcpClient">
            <inheritdoc />
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.AesTcpClient.ReceiveAsync">
            <inheritdoc />
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.AesTcpClient.SendAsync(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.AesTcpClient.SendAlreadyEncryptedData(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.AesTcpClient.ReceiveEncryptedData">
            <inheritdoc />
        </member>
        <member name="T:GardeningSystem.DataAccess.Communication.AesTcpListener">
            <inheritdoc/>
        </member>
        <member name="E:GardeningSystem.DataAccess.Communication.AesTcpListener.ClientConnectedEventHandler">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.AesTcpListener.ReceiveAsync(System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.AesTcpListener.SendAsync(System.Byte[],System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.AesTcpListener.ClientConnected(GardeningSystem.Common.Models.Entities.ClientConnectedArgs)">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.DataAccess.Communication.Base.NetworkBase">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.NetworkBase.Start(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.NetworkBase.Start(System.Threading.CancellationToken,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.NetworkBase.Stop">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.NetworkBase.ReceiveAsync(System.IO.Stream,System.Boolean)">
            <summary>
            Receives a package form the <paramref name="stream"/>.
            </summary>
            <param name="stream">Network stream or Ssl stream</param>
            <param name="receiveWithoutHeader">True to receive data without a length header at the beginning.</param>
            <returns>A task that represents the asynchronous receive operation. The value of the TResult
            parameter contains the byte array containing the received data.</returns>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.NetworkBase.SendAsync(System.Byte[],System.IO.Stream,System.Boolean)">
            <summary>
            Writes the byte array to the <paramref name="stream"/> asynchron.
            </summary>
            <param name="data">Data to send.</param>
            <param name="stream">Network stream or Ssl stream</param>
            <param name="sendWithoutHeader">
            True to send data without a length header at the beginning.
            Not recommended when <paramref name="data"/> is large.
            </param>
            <returns>A task that represents the asynchronous send operation.</returns>
        </member>
        <member name="T:GardeningSystem.DataAccess.Communication.Base.TcpClientBaseClass">
            <inheritdoc/>
        </member>
        <member name="P:GardeningSystem.DataAccess.Communication.Base.TcpClientBaseClass.RemoteEndPoint">
            <inheritdoc/>
        </member>
        <member name="P:GardeningSystem.DataAccess.Communication.Base.TcpClientBaseClass.LocalEndPoint">
            <inheritdoc/>
        </member>
        <member name="E:GardeningSystem.DataAccess.Communication.Base.TcpClientBaseClass.ConnectionCollapsedEvent">
            <inheritdoc/>
        </member>
        <member name="F:GardeningSystem.DataAccess.Communication.Base.TcpClientBaseClass.networkStream">
            <inheritdoc/>
        </member>
        <member name="F:GardeningSystem.DataAccess.Communication.Base.TcpClientBaseClass.Logger">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.TcpClientBaseClass.Start(System.Threading.CancellationToken,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.TcpClientBaseClass.ReceiveAsync">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.TcpClientBaseClass.SendAsync(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.TcpClientBaseClass.IsConnected">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.TcpClientBaseClass.ReceiveAsyncWithoutLengthHeader">
            <summary>
            Receives a byte array that has no length header at the beginning.
            </summary>
            <returns>A task that represents the asynchronous receive operation. The value of the TResult
            parameter contains the received data.</returns>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.TcpClientBaseClass.SendAsyncWithoutLengthHeader(System.Byte[])">
            <summary>
            Sends a byte array without adding a length header to it.
            </summary>
            <param name="data">Data to send.</param>
            <returns>A task that represents the asynchronous send operation.</returns>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.TcpClientBaseClass.ConfigureKeepAlive_Windows(System.Int32)">
            <summary>
            Works only on windows: "Socket.IOControl handles Windows-specific control codes and is not supported on this platform"
            </summary>
        </member>
        <member name="T:GardeningSystem.DataAccess.Communication.Base.TcpListenerBaseClass">
            <inheritdoc/>
        </member>
        <member name="P:GardeningSystem.DataAccess.Communication.Base.TcpListenerBaseClass.EndPoint">
            <inheritdoc/>
        </member>
        <member name="F:GardeningSystem.DataAccess.Communication.Base.TcpListenerBaseClass.Logger">
            <summary>
            NLog Logger.
            </summary>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.TcpListenerBaseClass.ReceiveAsync(System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.TcpListenerBaseClass.SendAsync(System.Byte[],System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.TcpListenerBaseClass.ClientConnected(GardeningSystem.Common.Models.Entities.ClientConnectedArgs)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.TcpListenerBaseClass.Start(System.Threading.CancellationToken,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.DataAccess.Communication.HttpForwarder">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.HttpForwarder.ReceiveAsync">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.HttpForwarder.SendAsync(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.DataAccess.Communication.LocalMobileAppDiscovery.LocalMobileAppDiscovery">
            <inheritdoc/>
        </member>
        <member name="F:GardeningSystem.DataAccess.Communication.LocalMobileAppDiscovery.LocalMobileAppDiscovery.MulticastAddressV4">
            <summary>
            The IPAddress and port of the IPV4 multicast group.
            </summary>
        </member>
        <member name="F:GardeningSystem.DataAccess.Communication.LocalMobileAppDiscovery.LocalMobileAppDiscovery.GardeningSystemIdentificationString">
            <summary>
            String to search for in a message received from the multicast group, indicating that this message is for a
            gardening system.
            </summary>
        </member>
        <member name="E:GardeningSystem.DataAccess.Communication.LocalMobileAppDiscovery.LocalMobileAppDiscovery.MobileAppFound">
            <summary>
            This asynchronous event is raised whenever a mobile app is discovered.
            </summary>
        </member>
        <member name="P:GardeningSystem.DataAccess.Communication.LocalMobileAppDiscovery.LocalMobileAppDiscovery.EndPoint">
            <inheritdoc/>
        </member>
        <member name="P:GardeningSystem.DataAccess.Communication.LocalMobileAppDiscovery.LocalMobileAppDiscovery.UdpListener">
            <summary>
            The UdpListener joined to the multicast group on multiple interfaces, which is used to receive the broadcasts
            </summary>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.LocalMobileAppDiscovery.LocalMobileAppDiscovery.Start(System.Net.IPEndPoint)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.LocalMobileAppDiscovery.LocalMobileAppDiscovery.Stop">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.DataAccess.Communication.LocalMobileAppDiscovery.UdpSocketSender">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.LocalMobileAppDiscovery.UdpSocketSender.SendAsync(System.Byte[],System.Net.IPEndPoint)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.LocalMobileAppDiscovery.UdpSocketSender.SendToAllInterfacesAsync(System.Byte[],System.Net.IPEndPoint)">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.DataAccess.Communication.NatController">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.NatController.StartSearchingForNatDevices">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.NatController.CloseAllOpendPorts">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.NatController.ClosePublicPort(System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.NatController.OpenPublicPort(System.Int32,System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.DataAccess.Communication.RfCommunicator">
            <inheritdoc />
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.RfCommunicator.Start">
            <inheritdoc />
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.RfCommunicator.Stop">
            <inheritdoc />
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.RfCommunicator.DiscoverNewModule">
            <inheritdoc />
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.RfCommunicator.PingModule(GardeningSystem.Common.Models.DTOs.ModuleInfoDto)">
            <inheritdoc />
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.RfCommunicator.GetTempAndSoilMoisture(GardeningSystem.Common.Models.DTOs.ModuleInfoDto)">
            <inheritdoc />
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.RfCommunicator.OpenValve(GardeningSystem.Common.Models.DTOs.ModuleInfoDto,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.RfCommunicator.CloseValve(GardeningSystem.Common.Models.DTOs.ModuleInfoDto)">
            <inheritdoc />
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.RfCommunicator.GetBatteryLevel(GardeningSystem.Common.Models.DTOs.ModuleInfoDto)">
            <inheritdoc />
        </member>
        <member name="T:GardeningSystem.DataAccess.Communication.SslTcpClient">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.SslTcpClient.Start(System.Threading.CancellationToken,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.SslTcpClient.ReceiveAsync">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.SslTcpClient.SendAsync(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.DataAccess.Communication.SslTcpListener">
            <inheritdoc/>
        </member>
        <member name="E:GardeningSystem.DataAccess.Communication.SslTcpListener.ClientConnectedEventHandler">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.SslTcpListener.ClientConnected(GardeningSystem.Common.Models.Entities.ClientConnectedArgs)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.SslTcpListener.SendConfidentialInformation(System.Net.Security.SslStream,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.DataAccess.Database.DatabaseContext">
            <summary>
            Inherits from DbContext.
            Class that contains the connection string for the mysql database and multiple tabels as DbSet instance.
            </summary>
        </member>
        <member name="P:GardeningSystem.DataAccess.Database.DatabaseContext.sensordata">
            <summary>
            Table where the sensor measurements get stored.
            </summary>
        </member>
        <member name="T:GardeningSystem.DataAccess.Database.DbBaseRepository`1">
            <summary>
            Base class of all database repositories.
            </summary>
            <typeparam name="T">Data object of the repository.</typeparam>
        </member>
        <member name="F:GardeningSystem.DataAccess.Database.DbBaseRepository`1.LOCKER">
            <summary>
            SemaphoreSlim to lock concurrent table accesses.
            </summary>
        </member>
        <member name="M:GardeningSystem.DataAccess.Database.DbBaseRepository`1.AddToTable(`0,System.Threading.CancellationToken)">
            <summary>
            Adds a new object to the table with the type <typeparamref name="T"/>..
            </summary>
            <param name="o">Object to add.</param>
            <param name="cancellationToken">A System.Threading.CancellationToken to stop the asynchron task, when requested.</param>
            <returns>A task that represents the asynchronous add operation. The task result contains
            the number of state entries written to the database.</returns>
        </member>
        <member name="M:GardeningSystem.DataAccess.Database.DbBaseRepository`1.RemoveFromTable(`0,System.Threading.CancellationToken)">
            <summary>
            Removes a object from the table with the type <typeparamref name="T"/>..
            </summary>
            <param name="o">Object to remove.</param>
            <param name="cancellationToken">A System.Threading.CancellationToken to stop the asynchron task, when requested.</param>
            <returns>A task that represents the asynchronous remove operation. The task result contains
            the number of state entries written to the database.</returns>
        </member>
        <member name="M:GardeningSystem.DataAccess.Database.DbBaseRepository`1.UpdateObject(`0,System.Threading.CancellationToken)">
            <summary>
            Updates a existing object from the table with the type <typeparamref name="T"/>.
            </summary>
            <param name="o">Updated object.</param>
            <param name="cancellationToken">A System.Threading.CancellationToken to stop the asynchron task, when requested.</param>
            <returns>A task that represents the asynchronous update operation. The task result contains
            a boolean that is true when an object (with the same Id as the updated object) got successfully updated.</returns>
        </member>
        <member name="M:GardeningSystem.DataAccess.Database.DbBaseRepository`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.DataAccess.Repositories.CertificateRepository">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Repositories.CertificateRepository.GetCertificate(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Repositories.CertificateRepository.CreateSelfSignedCertificate(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Repositories.CertificateRepository.StoreCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.RSA)">
            <summary>
            Associate the key with the certificate.
            </summary>
        </member>
        <member name="M:GardeningSystem.DataAccess.Repositories.CertificateRepository.GetCertificateFromStore(System.String)">
            <summary>
            Gets certificate with specified certThumbprint from the specified StoreLocation.
            Returns null when no certificate with the given Thumbprint was found.
            </summary>
        </member>
        <member name="T:GardeningSystem.DataAccess.Repositories.SensorDataDbRepository">
            <inheritdoc/>
            <seealso cref="T:GardeningSystem.DataAccess.Database.DbBaseRepository`1"/>
            <seealso cref="T:GardeningSystem.DataAccess.Database.DatabaseContext"/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Repositories.SensorDataDbRepository.AddDataPoint(GardeningSystem.Common.Models.Entities.ModuleData)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Repositories.SensorDataDbRepository.RemoveDataPoint(GardeningSystem.Common.Models.Entities.ModuleData)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Repositories.SensorDataDbRepository.GetAllDataPoints">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Repositories.SensorDataDbRepository.QueryDataPointsById(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.DataAccess.Repositories.ModulesRepository">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Repositories.ModulesRepository.AddModule(GardeningSystem.Common.Models.DTOs.ModuleInfoDto)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Repositories.ModulesRepository.GetAllRegisteredModules">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Repositories.ModulesRepository.GetModuleById(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Repositories.ModulesRepository.RemoveModule(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Repositories.ModulesRepository.UpdateModule(GardeningSystem.Common.Models.Entities.ModuleInfo)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Repositories.ModulesRepository.GetIdFromModuleId(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.DataAccess.Repositories.SerializedFileRepository`1">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Repositories.SerializedFileRepository`1.Init(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Repositories.SerializedFileRepository`1.AppendToFileList(`0)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Repositories.SerializedFileRepository`1.ReadListFromFile">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Repositories.SerializedFileRepository`1.WriteListToFile(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Repositories.SerializedFileRepository`1.RemoveItemFromFileList(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Repositories.SerializedFileRepository`1.UpdateItemFromList(`0)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Repositories.SerializedFileRepository`1.WriteSingleObjectToFile``1(``0)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Repositories.SerializedFileRepository`1.ReadSingleObjectFromFile``1">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.DataAccess.WifiConfigurator">
            <inheritdoc/>
        </member>
        <member name="P:GardeningSystem.DataAccess.WifiConfigurator.AccessPointStarted">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.WifiConfigurator.ManagedConnectToWlan(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.WifiConfigurator.ChangeWlan(System.String,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.WifiConfigurator.DisconnectFromWlan">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.WifiConfigurator.GetAllWlans">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.WifiConfigurator.HasInternet">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.WifiConfigurator.IsConnectedToWlan">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.WifiConfigurator.CreateAP">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.WifiConfigurator.ShutdownAP">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.WifiConfigurator.IsAccessPointUp">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.WifiConfigurator.ReloadDaemon">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.WifiConfigurator.loopFunction(System.Func{System.Boolean},System.Int32,System.Int32)">
            <summary>
            Calls every <paramref name="millisecondsInterval"/> ms a function (<paramref name="func"/>).
            Stops when the function returns true, or <paramref name="maxLoopCount"/> is reached.
            </summary>
            <param name="func"></param>
            <param name="millisecondsInterval"></param>
            <param name="maxLoopCount"></param>
            <returns></returns>
        </member>
        <member name="M:GardeningSystem.DataAccess.WifiConfigurator.consoleV2(System.String,System.Diagnostics.DataReceivedEventHandler)">
            <summary>
            Does not wait for close the started process.
            </summary>
            <param name="command"></param>
            <param name="dataReceivedEventHandler"></param>
            <returns></returns>
        </member>
    </members>
</doc>
