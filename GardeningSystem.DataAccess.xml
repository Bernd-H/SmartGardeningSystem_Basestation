<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GardeningSystem.DataAccess</name>
    </assembly>
    <members>
        <member name="T:GardeningSystem.DataAccess.Communication.AesTcpClient">
            <inheritdoc />
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.AesTcpClient.ReceiveAsync">
            <inheritdoc />
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.AesTcpClient.SendAsync(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.AesTcpClient.SendAlreadyEncryptedData(System.Byte[])">
            <inheritdoc />
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.AesTcpClient.ReceiveEncryptedData">
            <inheritdoc />
        </member>
        <member name="T:GardeningSystem.DataAccess.Communication.AesTcpListener">
            <inheritdoc/>
        </member>
        <member name="E:GardeningSystem.DataAccess.Communication.AesTcpListener.ClientConnectedEventHandler">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.AesTcpListener.ReceiveAsync(System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.AesTcpListener.SendAsync(System.Byte[],System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.AesTcpListener.ClientConnected(GardeningSystem.Common.Models.Entities.ClientConnectedArgs)">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.DataAccess.Communication.Base.NetworkBase">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.NetworkBase.Start(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.NetworkBase.Start(System.Threading.CancellationToken,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.NetworkBase.Stop">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.NetworkBase.ReceiveAsync(System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.NetworkBase.SendAsync(System.Byte[],System.IO.Stream)">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.DataAccess.Communication.Base.TcpClientBaseClass">
            <inheritdoc/>
        </member>
        <member name="P:GardeningSystem.DataAccess.Communication.Base.TcpClientBaseClass.RemoteEndPoint">
            <inheritdoc/>
        </member>
        <member name="P:GardeningSystem.DataAccess.Communication.Base.TcpClientBaseClass.LocalEndPoint">
            <inheritdoc/>
        </member>
        <member name="E:GardeningSystem.DataAccess.Communication.Base.TcpClientBaseClass.ConnectionCollapsedEvent">
            <inheritdoc/>
        </member>
        <member name="F:GardeningSystem.DataAccess.Communication.Base.TcpClientBaseClass.networkStream">
            <inheritdoc/>
        </member>
        <member name="F:GardeningSystem.DataAccess.Communication.Base.TcpClientBaseClass.Logger">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.TcpClientBaseClass.Start(System.Threading.CancellationToken,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.TcpClientBaseClass.ReceiveAsync">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.TcpClientBaseClass.SendAsync(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.TcpClientBaseClass.IsConnected">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.TcpClientBaseClass.ConfigureKeepAlive_Windows(System.Int32)">
            <summary>
            Works only on windows: "Socket.IOControl handles Windows-specific control codes and is not supported on this platform"
            </summary>
        </member>
        <member name="T:GardeningSystem.DataAccess.Communication.Base.TcpListenerBaseClass">
            <inheritdoc/>
        </member>
        <member name="P:GardeningSystem.DataAccess.Communication.Base.TcpListenerBaseClass.EndPoint">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.TcpListenerBaseClass.ClientConnected(GardeningSystem.Common.Models.Entities.ClientConnectedArgs)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.Base.TcpListenerBaseClass.Start(System.Threading.CancellationToken,System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.DataAccess.Communication.HttpForwarder">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.HttpForwarder.ReceiveAsync">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.HttpForwarder.SendAsync(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.DataAccess.Communication.LocalMobileAppDiscovery.LocalMobileAppDiscovery">
            <inheritdoc/>
        </member>
        <member name="F:GardeningSystem.DataAccess.Communication.LocalMobileAppDiscovery.LocalMobileAppDiscovery.MulticastAddressV4">
            <summary>
            The IPAddress and port of the IPV4 multicast group.
            </summary>
        </member>
        <member name="F:GardeningSystem.DataAccess.Communication.LocalMobileAppDiscovery.LocalMobileAppDiscovery.GardeningSystemIdentificationString">
            <summary>
            String to search for in a message received from the multicast group, indicating that this message is for a
            gardening system.
            </summary>
        </member>
        <member name="E:GardeningSystem.DataAccess.Communication.LocalMobileAppDiscovery.LocalMobileAppDiscovery.MobileAppFound">
            <summary>
            This asynchronous event is raised whenever a mobile app is discovered.
            </summary>
        </member>
        <member name="P:GardeningSystem.DataAccess.Communication.LocalMobileAppDiscovery.LocalMobileAppDiscovery.EndPoint">
            <inheritdoc/>
        </member>
        <member name="P:GardeningSystem.DataAccess.Communication.LocalMobileAppDiscovery.LocalMobileAppDiscovery.UdpListener">
            <summary>
            The UdpListener joined to the multicast group on multiple interfaces, which is used to receive the broadcasts
            </summary>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.LocalMobileAppDiscovery.LocalMobileAppDiscovery.Start(System.Net.IPEndPoint)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.LocalMobileAppDiscovery.LocalMobileAppDiscovery.Stop">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.DataAccess.Communication.LocalMobileAppDiscovery.UdpSocketSender">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.LocalMobileAppDiscovery.UdpSocketSender.SendAsync(System.Byte[],System.Net.IPEndPoint)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.LocalMobileAppDiscovery.UdpSocketSender.SendToAllInterfacesAsync(System.Byte[],System.Net.IPEndPoint)">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.DataAccess.Communication.NatController">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.NatController.StartSearchingForNatDevices">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.NatController.CloseAllOpendPorts">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.NatController.ClosePublicPort(System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.NatController.OpenPublicPort(System.Int32,System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.DataAccess.Communication.RfCommunicator">
            <inheritdoc />
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.RfCommunicator.Start">
            <inheritdoc />
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.RfCommunicator.Stop">
            <inheritdoc />
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.RfCommunicator.DiscoverNewModule">
            <inheritdoc />
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.RfCommunicator.PingModule(GardeningSystem.Common.Models.DTOs.ModuleInfoDto)">
            <inheritdoc />
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.RfCommunicator.GetTempAndSoilMoisture(GardeningSystem.Common.Models.DTOs.ModuleInfoDto)">
            <inheritdoc />
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.RfCommunicator.OpenValve(GardeningSystem.Common.Models.DTOs.ModuleInfoDto,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.RfCommunicator.CloseValve(GardeningSystem.Common.Models.DTOs.ModuleInfoDto)">
            <inheritdoc />
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.RfCommunicator.GetBatteryLevel(GardeningSystem.Common.Models.DTOs.ModuleInfoDto)">
            <inheritdoc />
        </member>
        <member name="T:GardeningSystem.DataAccess.Communication.SslTcpClient">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.SslTcpClient.Start(System.Threading.CancellationToken,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.SslTcpClient.ReceiveAsync">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.SslTcpClient.SendAsync(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.DataAccess.Communication.SslTcpListener">
            <inheritdoc/>
        </member>
        <member name="E:GardeningSystem.DataAccess.Communication.SslTcpListener.ClientConnectedEventHandler">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.SslTcpListener.ClientConnected(GardeningSystem.Common.Models.Entities.ClientConnectedArgs)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Communication.SslTcpListener.SendConfidentialInformation(System.Net.Security.SslStream,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.DataAccess.Repositories.CertificateRepository.CreateSelfSignedCertificate(System.String)">
            <summary>
            Creates a self-signed X509 certificate and stores it in the specified StoreLocation
            </summary>
        </member>
        <member name="M:GardeningSystem.DataAccess.Repositories.CertificateRepository.StoreCertificate(System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.RSA)">
            <summary>
            Associate the key with the certificate.
            </summary>
        </member>
        <member name="M:GardeningSystem.DataAccess.Repositories.CertificateRepository.GetCertificateFromStore(System.String)">
            <summary>
            Gets certificate with specified certThumbprint from the specified StoreLocation.
            Returns null when no certificate with the given Thumbprint was found.
            </summary>
        </member>
        <member name="M:GardeningSystem.DataAccess.WifiConfigurator.loopFunction(System.Func{System.Boolean},System.Int32,System.Int32)">
            <summary>
            Calls every <paramref name="millisecondsInterval"/> ms a function (<paramref name="func"/>).
            Stops when the function returns true, or <paramref name="maxLoopCount"/> is reached.
            </summary>
            <param name="func"></param>
            <param name="millisecondsInterval"></param>
            <param name="maxLoopCount"></param>
            <returns></returns>
        </member>
        <member name="M:GardeningSystem.DataAccess.WifiConfigurator.consoleV2(System.String,System.Diagnostics.DataReceivedEventHandler)">
            <summary>
            Does not wait for close the started process.
            </summary>
            <param name="command"></param>
            <param name="dataReceivedEventHandler"></param>
            <returns></returns>
        </member>
    </members>
</doc>
