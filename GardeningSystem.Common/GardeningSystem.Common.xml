<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GardeningSystem.Common</name>
    </assembly>
    <members>
        <member name="T:GardeningSystem.Common.Configuration.ConfigurationContainer">
            <summary>
            Used to pass the settings file from GardeningSystem.Program.cs to StartupRestAPI.cs
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Configuration.ConfigurationContainer.OverwriteSomeSettings(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Overwrites some settings when test environment is set
            </summary>
        </member>
        <member name="F:GardeningSystem.Common.Configuration.ConfigurationVars.DAEMON_NAME">
            <summary>
            Name under which the linux daemon runs (this process).
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.DTOs.ApplicationSettingsDto.CityName">
            <summary>
            Name of a near by city.
            Used to get weather forecasts for this location.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.DTOs.ApplicationSettingsDto.ServerCertificate">
            <summary>
            Thumbprint of the certificate
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.DTOs.ApplicationSettingsDto.AesKey">
            <summary>
            Exchanged to the mobile app securley. Used to decrypt
            the authentication information (in RestAPI) sent by the mobile app.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.DTOs.ApplicationSettingsDto.AesIV">
            <summary>
            Exchanged to the mobile app securley. Used to decrypt
            the authentication information (in RestAPI) sent by the mobile app.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.DTOs.ApplicationSettingsDto.ConfigurationModeEnabled">
            <summary>
            Creates a wlan access point and starts the AesKeyExchangeManager.
            This mode was created for the first configuration of the raspberry with the mobile app.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.DTOs.ApplicationSettingsDto.APIToken">
            <summary>
            Token needed for API request on the external server.
            This token get's exchanged in the assembly line and doesn't expire.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.DTOs.ApplicationSettingsDto.LoginSecrets">
            <summary>
            Login username + hasehd password.
            Will be used to compare the login data entered on the mobile app.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.DTOs.IPStatusDto.Id">
            <summary>
            Basestation ID
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.DTOs.IPStatusDto.Ip">
            <summary>
            Public IP addres of basestation
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.DTOs.ModuleInfoDto.SignalStrength">
            <summary>
            Last measured signal strength to the module.
            RSSI...Received Signal Strength Indicator
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.DTOs.ModuleInfoDto.BatteryLevel">
            <summary>
            Last measured battery level of the module.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.DTOs.ModuleInfoDto.AssociatedModules">
            <summary>
            Property for valves.
            Sensors that are associated to this valve.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.DTOs.ModuleInfoDto.LastWaterings">
            <summary>
            Property for valves.
            List of irrigation DateTimes with the time the valve was open in minutes.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.DTOs.ModuleInfoDto.EnabledForManualIrrigation">
            <summary>
            Property for valves.
            True to open or close this valve when the system gets controlled manually.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.DTOs.ModuleInfoDto.SoilMoistureMeasurements">
            <summary>
            Property for sensors.
            List of soil moisture measurements.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.DTOs.ModuleInfoDto.TemperatureMeasurements">
            <summary>
            List of temperature measurements of the module.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.Entities.ApplicationSettings.CityName">
            <summary>
            Name of a near by city.
            Used to get weather forecasts for this location.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.Entities.ApplicationSettings.ServerCertificate">
            <summary>
            Thumbprint of the certificate stored in the X509Store.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.Entities.ApplicationSettings.AesKey">
            <summary>
            Encrypted AesKey.
            Exchanged to the mobile app securley. Used to decrypt
            the authentication information (in RestAPI) sent by the mobile app.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.Entities.ApplicationSettings.AesIV">
            <summary>
            Encrypted AesIV.
            Exchanged to the mobile app securley. Used to decrypt
            the authentication information (in RestAPI) sent by the mobile app.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.Entities.ApplicationSettings.ConfigurationModeEnabled">
            <summary>
            Creates a wlan access point and starts the AesKeyExchangeManager.
            This mode was created for the first configuration of the raspberry with the mobile app.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.Entities.ApplicationSettings.APIToken">
            <summary>
            Token needed for API request on the external server.
            This token get's exchanged in the assembly line and doesn't expire.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.Entities.ApplicationSettings.LoginSecrets">
            <summary>
            Login username + hasehd password.
            Will be used to compare the login data entered on the mobile app.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.Entities.IrrigationInfo.IrrigationTime">
            <summary>
            Time the valves associated with the sensor should stay open.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.Entities.ModuleData.Id">
            <summary>
            Sensor ID
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.Entities.ModuleData.TimeStamp">
            <summary>
            UTC Time
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.Entities.ModuleInfo.Id">
            <summary>
            Storage Id of the module.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.Entities.ModuleInfo.ModuleId">
            <summary>
            Id of the module (Id to send commands to).
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.Entities.ModuleInfo.Name">
            <summary>
            Name of the module.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.Entities.ModuleInfo.ModuleType">
            <summary>
            Type of the module (sensor / valve).
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.Entities.ModuleInfo.SignalStrength">
            <summary>
            Last measured signal strength to the module.
            RSSI...Received Signal Strength Indicator
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.Entities.ModuleInfo.BatteryLevel">
            <summary>
            Last measured battery level of the module.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.Entities.ModuleInfo.TemperatureMeasurements">
            <summary>
            List of temperature measurements of the module.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.Entities.ModuleInfo.AssociatedModules">
            <summary>
            Property for valves.
            Sensors that are associated to this valve.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.Entities.ModuleInfo.LastWaterings">
            <summary>
            Property for valves.
            List of irrigation DateTimes with the time the valve was open in minutes.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.Entities.ModuleInfo.EnabledForManualIrrigation">
            <summary>
            Property for valves.
            True to open or close this valve when the system gets controlled manually.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.Entities.ModuleInfo.SoilMoistureMeasurements">
            <summary>
            Property for sensors.
            List of soil moisture measurements.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Models.Entities.SslClientSettings.TargetHost">
            <summary>
            The name of the server that shares this System.Net.Security.SslStream.
            </summary>
        </member>
        <member name="T:GardeningSystem.Common.SecureMemory">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.Common.SecureMemory.GetObject">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.Common.SecureMemory.LoadObject(GardeningSystem.Common.Models.Entities.PointerLengthPair)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.Common.SecureMemory.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Communication.Base.INetworkBase">
            <summary>
            Base class for all clients and listeners.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Communication.Base.INetworkBase.Start(System.Object)">
            <summary>
            Starts listening or connects to a specific endpoint.
            </summary>
            <param name="args"></param>
            <returns>True, when the process got started successfully.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Communication.Base.INetworkBase.Stop">
            <summary>
            Stops a socket listener or closes a socket client.
            </summary>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Communication.Base.ITcpClientBaseClass">
            <summary>
            Base class for all tcp clients.
            Has features such as KeepAlive or ConnectionCollapsedEvent.
            </summary>
        </member>
        <member name="E:GardeningSystem.Common.Specifications.Communication.Base.ITcpClientBaseClass.ConnectionCollapsedEvent">
            <summary>
            Gets raised when the connection collapsed.
            The process, which raises this event gets only activated when keepAliveInterval got set on start.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Specifications.Communication.Base.ITcpClientBaseClass.RemoteEndPoint">
            <summary>
            Remote endpoint the tcp client is connected to.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Specifications.Communication.Base.ITcpClientBaseClass.LocalEndPoint">
            <summary>
            Local endpoint of the tcp client.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Communication.Base.ITcpClientBaseClass.ReceiveAsync">
            <summary>
            Receives data from the connected server.
            </summary>
            <returns>A task that represents the asynchronous receive operation. The value of the TResult
            parameter contains the byte array containing the received data.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Communication.Base.ITcpClientBaseClass.SendAsync(System.Byte[])">
            <summary>
            Sends data to the server.
            </summary>
            <param name="data">Data to send.</param>
            <returns>A task that represents the asynchronous send operation.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Communication.Base.ITcpClientBaseClass.IsConnected">
            <summary>
            Made for test purposes.
            (Uses socket.Poll())
            </summary>
            <returns>True, when the connection is still active.</returns>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Communication.Base.ITcpListenerBaseClass">
            <summary>
            Base class for all tcp listeners.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Specifications.Communication.Base.ITcpListenerBaseClass.EndPoint">
            <summary>
            Local endpoint of the tcp listener.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Communication.Base.ITcpListenerBaseClass.ReceiveAsync(System.IO.Stream)">
            <summary>
            Receives a package form the <paramref name="stream"/>.
            </summary>
            <param name="stream">Network stream or Ssl stream</param>
            <returns>A task that represents the asynchronous receive operation. The value of the TResult
            parameter contains the byte array containing the received data.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Communication.Base.ITcpListenerBaseClass.SendAsync(System.Byte[],System.IO.Stream)">
            <summary>
            Writes the byte array to the <paramref name="stream"/> asynchron.
            </summary>
            <param name="data">Data to send.</param>
            <param name="stream">Network stream or Ssl stream</param>
            <returns>A task that represents the asynchronous send operation.</returns>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Communication.IAesTcpClient">
            <summary>
            A TCP client that sends all packages AES encrypted and decryptes all received ones.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Communication.IAesTcpClient.ReceiveEncryptedData">
            <summary>
            Receives packages and does not decrypt them.
            </summary>
            <returns>A task that represents the asynchronous read operation. The value of the TResult
            parameter contains the byte array containing the received encrypted data.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Communication.IAesTcpClient.SendAlreadyEncryptedData(System.Byte[])">
            <summary>
            Sends a byte array to the server without encrypting it.
            </summary>
            <param name="encryptedData">Already encrypted byte array.</param>
            <returns>A task that represents the asynchronous send operation.</returns>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Communication.IAesTcpListener">
            <summary>
            A TCP listener that sends all packages AES encrypted and decryptes all received ones.
            The used AES key is stored in the application settings.
            </summary>
            <seealso cref="T:GardeningSystem.Common.Specifications.Managers.ISettingsManager">Manager that administrates the application settings.</seealso>
        </member>
        <member name="E:GardeningSystem.Common.Specifications.Communication.IAesTcpListener.ClientConnectedEventHandler">
            <summary>
            Event raised when a new client has connected.
            </summary>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Communication.IHttpForwarder">
            <summary>
            A TCP client that can send and receive HTTP API requests/responses.
            </summary>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Communication.ILocalMobileAppDiscovery">
            <summary>
            A Udp listener, who subscribes to a specific local multicast group and raises an event when a mobile app searching for this basestation is discoverd.
            </summary>
        </member>
        <member name="E:GardeningSystem.Common.Specifications.Communication.ILocalMobileAppDiscovery.MobileAppFound">
            <summary>
            An eventhandler that is raised whenever a mobile app is discovered.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Specifications.Communication.ILocalMobileAppDiscovery.EndPoint">
            <summary>
            Local endpoint of the listener.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Communication.ILocalMobileAppDiscovery.Start(System.Net.IPEndPoint)">
            <summary>
            Starts listening for and subscribes to the multicast group.
            </summary>
            <param name="localEndPoint">A local endpoint that the udp listener should take.</param>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Communication.ILocalMobileAppDiscovery.Stop">
            <summary>
            Stops listening and frees all resources.
            </summary>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Communication.INatController">
            <summary>
            A controller to open and close a port on all found NATs via UPnP or PMP.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Communication.INatController.StartSearchingForNatDevices">
            <summary>
            Starts searching for Upnp or Pmp supporting NATs.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Communication.INatController.OpenPublicPort(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Maps a specific private and public port via the Upnp or Pmp protocol on all reachable nat devices.
            </summary>
            <param name="privatePort">Port open on this computer.</param>
            <param name="publicPort">Port that sould be opened on the NAT device.</param>
            <param name="tcp">True to map a TCP port. False to map a UDP Port.</param>
            <returns>
            A task that represents a asynchronous operation. The value of the TResult
            parameter contains the mapped public port or -1 when the mapping failed.
            The returned public port can be different from the specified <paramref name="publicPort"/>, if mapping this port was not possible.
            </returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Communication.INatController.ClosePublicPort(System.Int32,System.Boolean)">
            <summary>
            Deletes a public port that got opend with INatController.OpenPublicPort() on all reachable nat devices.
            </summary>
            <param name="publicPort">Public port to close.</param>
            <param name="tcp">True if it is a TCP port, false if it is an UDP port.</param>
            <returns>A task that represents a asynchronous operation.</returns>
            <seealso cref="M:GardeningSystem.Common.Specifications.Communication.INatController.OpenPublicPort(System.Int32,System.Int32,System.Boolean)"/>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Communication.INatController.CloseAllOpendPorts">
            <summary>
            Closes all public ports that got opened with INatController.OpenPublicPort().
            </summary>
            <returns>A task that represents a asynchronous operation.</returns>
            <seealso cref="M:GardeningSystem.Common.Specifications.Communication.INatController.OpenPublicPort(System.Int32,System.Int32,System.Boolean)"/>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Communication.IRfCommunicator">
            <summary>
            Sends commands to an c++ application that processes these commands
            and communicates with the RF module.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Communication.IRfCommunicator.Stop">
            <summary>
            Shuts down the RF Module.
            </summary>
            <returns></returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Communication.IRfCommunicator.DiscoverNewModule(System.Byte)">
            <summary>
            Sends a discover command to the c++ app to discover a new module.
            </summary>
            <param name="freeModuleId">An Id for the new module.</param>
            <returns>Module info object containing data about the newly added module, such as module id or type (valve/sensor).</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Communication.IRfCommunicator.PingModule(GardeningSystem.Common.Models.DTOs.ModuleInfoDto)">
            <summary>
            Gets the RSSI of a specific module
            </summary>
            <param name="module">ModuleInfoDto object containing the module id.</param>
            <returns>The rssi to the module. Returns int.MaxValue when there was no repsone.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Communication.IRfCommunicator.GetTempAndSoilMoisture(GardeningSystem.Common.Models.DTOs.ModuleInfoDto)">
            <summary>
            Gets the temperature and the soil moisture of a specific module.
            </summary>
            <param name="module">ModuleInfoDto object containing the module id.</param>
            <returns>Temperature in degree celcius, Soil moisture in percent.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Communication.IRfCommunicator.OpenValve(GardeningSystem.Common.Models.DTOs.ModuleInfoDto,System.TimeSpan)">
            <summary>
            Sends a command to a specific module, to open the valve for a specific period specified in <paramref name="timeSpan"/>.
            </summary>
            <param name="module">ModuleInfoDto object containing the module id.</param>
            <param name="timeSpan">Timespan the valve should stay open. The maximum timespan is 8.5 hours, due to the amout of bytes specified for
            this variable in the protocoll.</param>
            <returns>True when everything went good.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Communication.IRfCommunicator.CloseValve(GardeningSystem.Common.Models.DTOs.ModuleInfoDto)">
            <summary>
            Sends a command to a specific module, to close the valve.
            </summary>
            <param name="module">ModuleInfoDto object containing the module id.</param>
            <returns>True when the valve got closed or was already closed.</returns>
            <remarks>Used to close the valve and to stop irrigating for the timespan sent with OpenValve.</remarks>
            <seealso cref="M:GardeningSystem.Common.Specifications.Communication.IRfCommunicator.OpenValve(GardeningSystem.Common.Models.DTOs.ModuleInfoDto,System.TimeSpan)"/>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Communication.IRfCommunicator.GetBatteryLevel(GardeningSystem.Common.Models.DTOs.ModuleInfoDto)">
            <summary>
            Gets the battery level from a specific module.
            </summary>
            <param name="module">ModuleInfoDto object containing the module id.</param>
            <returns>Battery level in percent.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Communication.IRfCommunicator.TryRerouteModule(System.Byte,System.Collections.Generic.List{System.Byte})">
            <summary>
            Trys to reach a module (<paramref name="moduleId"/>) over another one and stores the route on success. 
            </summary>
            <param name="moduleId">Module to change the route for.</param>
            <param name="otherModules">List of modules that will be used to relay messages to the module.</param>
            <returns>A task that reprecents an asynchronous operation. The value of the TResult
            parameter contains a boolean that is true when the module got reached over another one and is available now.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Communication.IRfCommunicator.RemoveModule(System.Byte)">
            <summary>
            Tells the module that it got removed.
            </summary>
            <param name="moduleId">Id of the module.</param>
            <returns>A task that reprecents an asynchronous operation. The value of the TResult
            parameter contains a boolean that is true when the module received the message successfully.</returns>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Communication.ISslTcpClient">
            <summary>
            A TCP client that sends and receives all packages over a SSL stream.
            </summary>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Communication.ISslTcpListener">
            <summary>
            A TCP listener that sends and receives all packages over a SSL stream.
            </summary>
        </member>
        <member name="E:GardeningSystem.Common.Specifications.Communication.ISslTcpListener.ClientConnectedEventHandler">
            <summary>
            Event that occurs when a new client has successfully connected.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Communication.ISslTcpListener.SendConfidentialInformation(System.Net.Security.SslStream,System.Byte[])">
            <summary>
            Sends <paramref name="data"/> over the <paramref name="sslStream"/> and
            tries to leak no data. (Obfuscates the byte array after it is sent)
            </summary>
            <param name="sslStream">Active ssl stream.</param>
            <param name="data">Data to send.</param>
            <returns>A task that represents the asynchronous send operation.</returns>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Communication.IUdpSocketSender">
            <summary>
            A simple udp sender.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Communication.IUdpSocketSender.SendAsync(System.Byte[],System.Net.IPEndPoint)">
            <summary>
            Sends an byte array to a specific endpoint <paramref name="endPoint"/>.
            </summary>
            <param name="data">Data to send.</param>
            <param name="endPoint">Remote endpoint. (Endpoint of the receiver)</param>
            <returns>A task that represents the asynchronous send operation. The value of the TResult
            parameter is true if no exception was thrown.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Communication.IUdpSocketSender.SendToAllInterfacesAsync(System.Byte[],System.Net.IPEndPoint)">
            <summary>
            Sends an byte array to a specific endpoint <paramref name="endPoint"/> on all interfaces.
            </summary>
            <param name="data">Data to send.</param>
            <param name="endPoint">Remote endpoint. (Endpoint of the receiver)</param>
            <returns>A task that represents the asynchronous send operation.</returns>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Configuration_Logging.IDevelopmentSetuper">
            <summary>
            Class with methods to setup a test environment.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Configuration_Logging.IDevelopmentSetuper.SetupTestEnvironment">
            <summary>
            Registers some fake modules.
            </summary>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.ILoggerService">
            <summary>
            Class to get an NLog logger for a specific class.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.ILoggerService.GetLogger``1">
            <summary>
            Gets a NLog logger instance.
            </summary>
            <typeparam name="T">Type of the class the logger is for.</typeparam>
            <returns>Logger for class with type <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Cryptography.IAesEncrypterDecrypter">
            <summary>
            Class to encrypt and decrypt byte arrays with RijndaelManaged.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Cryptography.IAesEncrypterDecrypter.EncryptByteArray(System.Byte[])">
            <summary>
            Encrypts a byte array with the Aes key, stored in the application settings.
            </summary>
            <param name="data">Data to encrypt.</param>
            <returns>Encrypted data.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Cryptography.IAesEncrypterDecrypter.DecryptToByteArray(System.Byte[])">
            <summary>
            Decrypts a byte array with the Aes key, stored in the application settings.
            </summary>
            <param name="data">Encrypted data.</param>
            <returns>Decrypted byte array.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Cryptography.IAesEncrypterDecrypter.GetServerAesKey">
            <summary>
            Creates and stores a new Aes key if no one has been created and stored.
            </summary>
            <returns>The Aes server key.</returns>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Cryptography.ICertificateHandler">
            <summary>
            Class that handles the self issued certificate.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Cryptography.ICertificateHandler.GetCurrentServerCertificate">
            <summary>
            Gets the self issued certificate form cache or X509Store.
            Setup() needs to be called first on startup.
            </summary>
            <returns>Certificate WITH PRIVATE RSA-KEY</returns>
            <exception cref="T:System.Exception">When there is no thumbprint stored in the applicationSettings or the certificate was not found.</exception>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Cryptography.ICertificateHandler.GetPublicServerCertificate">
            <summary>
            Gets the self issued public certificate form cache or X509Store.
            </summary>
            <returns>Certificate without private rsa key.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Cryptography.ICertificateHandler.Setup">
            <summary>
            Creates a new self issued certificate if there is not one stored currently.
            Used in Program.cs to avoid a deadlock in SettingsManager.ToDo() and AesEncrypterDecrypter.generateAndStoreSymmetricKey().
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Cryptography.ICertificateHandler.CheckForCertificateUpdate">
            <summary>
            Renews the certificate if neccessary.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Cryptography.ICertificateHandler.DecryptData(System.Byte[])">
            <summary>
            Decrypts a byte array with the private aes key of the stored certificate.
            </summary>
            <param name="encryptedData">Encrypted byte array.</param>
            <returns>A pointer that points to the decrypted data in memory and the length of the decrypted byte array.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Cryptography.ICertificateHandler.EncryptData(GardeningSystem.Common.Models.Entities.PointerLengthPair)">
            <summary>
            Encrypts a byte array with the private Aes key of the stored certificate.
            </summary>
            <param name="plp">Pointer for a byte array in memory and it's length.</param>
            <returns>A byte array containing the encrypted data.</returns>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Cryptography.IPasswordHasher">
            <summary>
            Class to hash and verify passwords.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Cryptography.IPasswordHasher.HashPassword(System.Byte[])">
            <summary>
            Hashes the <paramref name="password"/>. 
            </summary>
            <param name="password">Password to hash.</param>
            <returns>String containing the performed iterations, the salt and the hash seperated with a dot.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Cryptography.IPasswordHasher.VerifyHashedPassword(System.String,System.Byte[])">
            <summary>
            Checks if the <paramref name="hashedPassword"/> equates the <paramref name="providedPassword"/>.
            </summary>
            <param name="hashedPassword">Hashed password string.</param>
            <param name="providedPassword">Password in plaintext.</param>
            <returns>Bool saying if the password both hashes are the same and a bool
            containing if the <paramref name="hashedPassword"/> needs an upgrade.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "P:GardeningSystem.Common.Specifications.DataObjects.IClientSettings.ConnectTimeout" -->
        <!-- Badly formed XML comment ignored for member "P:GardeningSystem.Common.Specifications.DataObjects.IClientSettings.SendTimeout" -->
        <!-- Badly formed XML comment ignored for member "P:GardeningSystem.Common.Specifications.DataObjects.IClientSettings.ReceiveTimeout" -->
        <member name="P:GardeningSystem.Common.Specifications.DataObjects.IClientSettings.KeepAliveInterval">
            <summary>
            The default value is 0, which deactivates the keep alive feature. Specifying -1 disables also this feature.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:GardeningSystem.Common.Specifications.DataObjects.IListenerSettings.SendTimeout" -->
        <!-- Badly formed XML comment ignored for member "P:GardeningSystem.Common.Specifications.DataObjects.IListenerSettings.ReceiveTimeout" -->
        <member name="P:GardeningSystem.Common.Specifications.DataObjects.IListenerSettings.Backlog">
            <summary>
            The maximum length of the pending connections queue.
            </summary>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.DataObjects.IServiceDetails">
            <summary>
            Used in WanPackages, when the user accesses this server via peer to peer or via the external server.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Specifications.DataObjects.IServiceDetails.HoldConnectionOpen">
            <summary>
            True, to hold the connection from the LocalRelayManager to the local Service (ServiceType) open
            </summary>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.DataObjects.IServicePackage">
            <summary>
            Contains information of what currently active connection should be used in LocalRelayManager to forward Data.
            Used by MakeAesTcpRequest()
            </summary>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.IDatabaseContext">
            <summary>
            Inherits from DbContext.
            Class that contains the connection string for the mysql database and multiple tabels as DbSet instance.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Specifications.IDatabaseContext.sensordata">
            <summary>
            Table where the sensor measurements get stored.
            </summary>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.IDependencyResolver">
            <summary>
            Class that provides access to the autofac dependency container.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.IDependencyResolver.Resolve``1">
            <summary>
            Retrieve a service from the autofac context.
            </summary>
            <typeparam name="T">Type of the service</typeparam>
            <returns>Instance of the requested service.</returns>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.ISecureMemory">
            <summary>
            Class to get a byte array securely from a pointer.
            Obfuscates the memory of the byte array that was taken from the property SecureObject and
            frees all resources cleanly when the secure memory object gets disposed.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.ISecureMemory.GetObject">
            <summary>
            Returns a byte array, that will get disposed securely.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.ISecureMemory.LoadObject(GardeningSystem.Common.Models.Entities.PointerLengthPair)">
            <summary>
            Pointer that points to the secure object.
            </summary>
            <param name="plp"></param>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.IWifiConfigurator">
            <summary>
            Class that executes linux commands about the access point,
            interface state, ip address and scripts to change the wlan.
            </summary>
        </member>
        <member name="P:GardeningSystem.Common.Specifications.IWifiConfigurator.AccessPointStarted">
            <summary>
            Boolean that indicates wether the access point is currently starting or already started.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.IWifiConfigurator.ManagedConnectToWlan(System.String,System.String)">
            <summary>
            Shuts down the access point if there is on currently active or disconnects from a wlan first.
            After that it connects to the wlan with <paramref name="ssid"/> and <paramref name="secret"/>.
            </summary>
            <param name="ssid">Ssid of the wlan.</param>
            <param name="secret">Plaintext password of the wlan.</param>
            <remarks>ReloadDaemon() requiered afterwards!</remarks>
            <returns>True, when the wlan got changed successfully.</returns>
            <see cref="M:GardeningSystem.Common.Specifications.IWifiConfigurator.ReloadDaemon"/>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.IWifiConfigurator.IsConnectedToWlan">
            <summary>
            Get's the state of the wlan interface.
            </summary>
            <returns>False, when hosting an access point.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.IWifiConfigurator.HasInternet">
            <summary>
            Pings a popular server.
            </summary>
            <returns>True, when the ping was successfull.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.IWifiConfigurator.GetAllWlans">
            <summary>
            Gets a list of all reachable wlans.
            </summary>
            <returns>List of all available wlans.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.IWifiConfigurator.ChangeWlan(System.String,System.String)">
            <summary>
            Disconnects from current wlan and connects to another one.
            </summary>
            <param name="essid">Essid of the wlan.</param>
            <param name="secret">Plaintext password of the wlan.</param>
            <remarks>ReloadDaemon() requiered afterwards!</remarks>
            <returns>True, when the wlan got changed successfully.</returns>
            <see cref="M:GardeningSystem.Common.Specifications.IWifiConfigurator.ReloadDaemon"/>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.IWifiConfigurator.DisconnectFromWlan">
            <summary>
            Disconnects from the current wifi.
            </summary>
            <returns>True, when the disconnection process was successfull.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.IWifiConfigurator.CreateAP">
            <summary>
            Starts up an access point.
            </summary>
            <returns>True, when the operation was successfull.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.IWifiConfigurator.ShutdownAP">
            <summary>
            Shuts down the access point.
            </summary>
            <returns>True, when the operation was successfull.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.IWifiConfigurator.ReloadDaemon">
            <summary>
            Sends a systemctl reload command.
            Necessary after ChangeWlan().
            </summary>
            <remarks>Shutsdown the service and starts it again.</remarks>
            <seealso cref="M:GardeningSystem.Common.Specifications.IWifiConfigurator.ChangeWlan(System.String,System.String)"/>
            <seealso cref="M:GardeningSystem.Common.Specifications.IWifiConfigurator.ManagedConnectToWlan(System.String,System.String)"/>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.IWifiConfigurator.RebootSystem">
            <summary>
            Sends a reboot command to the system.
            </summary>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Managers.IAesKeyExchangeManager">
            <summary>
            Class responsible for providing the key exchange service.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.IAesKeyExchangeManager.StartListener">
            <summary>
            Starts listening on a port specified in the IConfiguration for clients that want to exchange the Aes key.
            </summary>
            <returns>A task that represents a asynchronous operation.</returns>
            <remarks>Exchanges Aes key and iv via a ssl stream. This service is only active when the basestation hosts it's own access point.</remarks>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.IAesKeyExchangeManager.Stop">
            <summary>
            Stops the key exchange service.
            </summary>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Managers.IAPIManager">
            <summary>
            Class that manages Api requests to the external server.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.IAPIManager.GetToken">
            <summary>
            Trys to register at the external server to get a json web token, needed as authentication for all other api requests.
            </summary>
            <returns>A task that represents a asynchronous operation.</returns>
            <remarks>Sends this request to a specific private ip address. So this json web token (Jwt) can only be retrieved when the basestation
            gets started in the same network, as the external server. Made to exchange the Jwt, which has no expiration date, while the production
            of the basestation. The server will block all GetToken requests that are comming form IPs that are not private.</remarks>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.IAPIManager.UpdateIPStatus(GardeningSystem.Common.Models.DTOs.IPStatusDto)">
            <summary>
            Updates the public ip address of this system, which gets stored on the external server.
            This IP is used by the external server to redirect the mobile app to this gardening system basestation.
            </summary>
            <param name="dto">Public ip address and basestation id.</param>
            <returns>A task that represents a asynchronous operation.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.IAPIManager.GetWeatherForecast(System.String)">
            <summary>
            Requests the amount of rain in mm for the next day.
            </summary>
            <param name="location">Location of a near city.</param>
            <returns>A task that represents a asynchronous operation. The value of the TResult
            parameter contains a WeatherForecast object.</returns>
            <seealso cref="T:GardeningSystem.Common.Models.Entities.WeatherData"/>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Managers.ICommandManager">
            <summary>
            Class that manages commands sent from the mobile app.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:GardeningSystem.Common.Specifications.Managers.ICommandManager.Start" -->
        <member name="M:GardeningSystem.Common.Specifications.Managers.ICommandManager.Stop">
            <summary>
            Stops listening for commands and frees all used resources.
            </summary>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Managers.ILocalMobileAppDiscoveryManager">
            <summary>
            Class that manages the local mobile app discovery service.
            Implements also the response to the mobile app.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.ILocalMobileAppDiscoveryManager.Start">
            <summary>
            Starts listening for local mobile apps on a specific multicast address.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.ILocalMobileAppDiscoveryManager.Stop">
            <summary>
            Stops listening for mobile apps.
            </summary>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Managers.ILocalRelayManager">
            <summary>
            Manager that forwards packages comming from the WAN to the local services.
            Relays also the response back to the sender.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.ILocalRelayManager.MakeAPIRequest(System.Byte[],System.Int32)">
            <summary>
            Sends <paramref name="data"/> to the local API.
            This method is threadsafe.
            </summary>
            <param name="data">Data to forward.</param>
            <param name="port">Port of the local API.</param>
            <returns>A task that represents an asynchronous operation. The value of the TResult
            parameter contains the response of the API request.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.ILocalRelayManager.MakeTcpRequest(System.Byte[],System.Int32,System.Boolean)">
            <summary>
            Sends <paramref name="data"/> to a local service.
            This method is threadsafe.
            </summary>
            <param name="data">Data to forward.</param>
            <param name="port">Port of the local service.</param>
            <param name="closeConnection">True, when the connection should get closed and no data sent.</param>
            <returns>A task that represents an asynchronous operation. The value of the TResult
            parameter contains the response of the local service.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.ILocalRelayManager.Stop">
            <summary>
            Closes all open connections.
            </summary>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Managers.IModuleManager">
            <summary>
            Class that manages sensor- and valvemodules.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.IModuleManager.GetAllMeasurements">
            <summary>
            Measures the soil moisture and temperature of each sensor and stores the data in a database and in the module information object.
            </summary>
            <returns>A task that represents an asynchronous operation.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.IModuleManager.CloseValve(System.Guid)">
            <summary>
            Closes a specific valve.
            </summary>
            <param name="valveId">Id of the module.</param>
            <returns>A task that represents an asynchronous operation. The value of the TResult
            parameter contains a boolean that is true when the valve got closed successfully.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.IModuleManager.OpenValve(System.Guid,System.TimeSpan)">
            <summary>
            Opens a valve for a specific time span (<paramref name="valveOpenTime"/>).
            </summary>
            <param name="valveId">Internal storage Id of the valve/module.</param>
            <param name="valveOpenTime">Timespan the valve should stay open.</param>
            <remarks>The valve closes automatically after the given time span. Event if the module can't be reached.</remarks>
            <returns>A task that represents an asynchronous operation. The value of the TResult
            parameter contains a boolean that is true when the valve opend successfully.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.IModuleManager.OpenValve(System.Byte,System.TimeSpan)">
            <summary>
            Opens a valve for a specific time span (<paramref name="valveOpenTime"/>).
            </summary>
            <param name="externalValveId">External Id of the valve/module (= ModuleInfo.ModuleId).</param>
            <param name="valveOpenTime">Timespan the valve should stay open.</param>
            <remarks>The valve closes automatically after the given time span. Event if the module can't be reached.</remarks>
            <returns>A task that represents an asynchronous operation. The value of the TResult
            parameter contains a boolean that is true when the valve opend successfully.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.IModuleManager.DiscoverANewModule">
            <summary>
            Searches for a new module, exchanges all neccessary information/keys with the module and stores
            it in the ModuleRepository.
            </summary>
            <returns>A task that represents an asynchronous operation. The value of the TResult
            parameter contains a ModuleInfoDto object.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.IModuleManager.GetAllModules">
            <summary>
            Gets all stored modules.
            </summary>
            <returns>A task that represents an asynchronous operation. The value of the TResult
            parameter contains a list of all modules.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.IModuleManager.GetModuleById(System.Guid)">
            <summary>
            Gets more information about a specific module.
            </summary>
            <param name="id">Internal id of the module. (This id gets only used in this application)</param>
            <returns>A task that represents an asynchronous operation. The value of the TResult
            parameter contains a ModuleInfoDto object.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.IModuleManager.GetModule(System.Byte)">
            <summary>
            Gets more information about a specific module.
            </summary>
            <param name="moduleId">Internal id of the module. (This id gets only used in this application)</param>
            <returns>A ModuleInfo object.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.IModuleManager.RemoveModule(System.Guid)">
            <summary>
            Deletes a module form the local storage.
            </summary>
            <param name="moduleId">Internal id of the module. (This id gets only used in this application)</param>
            <returns>A task that represents an asynchronous operation. The value of the TResult
            parameter contains a boolean that is true when the module exists and got successfully removed.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.IModuleManager.UpdateModule(GardeningSystem.Common.Models.DTOs.ModuleInfoDto)">
            <summary>
            Updates some parameteres/information of a module.
            </summary>
            <param name="module">A ModuleInfoDto object.</param>
            <returns>A task that represents an asynchronous operation. The value of the TResult
            parameter contains a boolean that is true when the module got successfully updated.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.IModuleManager.PingModule(System.Byte)">
            <summary>
            Pings a module and updates the rssi property of the module.
            </summary>
            <param name="moduleId">Id of the module.</param>
            <returns>A task that represents an asynchronous operation. The value of the TResult
            parameter contains a boolean that is true when the module responded.</returns>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Managers.ISettingsManager">
            <summary>
            Class that manages the application settings.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.ISettingsManager.GetApplicationSettings(GardeningSystem.Common.Specifications.Cryptography.ICertificateHandler)">
            <summary>Gets the application settings.</summary>
            <param name="CertificateHandler">Must be set when confidential information should get decrypted.</param>
            <returns>
            The stored application settings.
            If there are no stored settings then the default settings will be returned.
            </returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.ISettingsManager.UpdateCurrentSettings(System.Func{GardeningSystem.Common.Models.DTOs.ApplicationSettingsDto,GardeningSystem.Common.Models.DTOs.ApplicationSettingsDto},GardeningSystem.Common.Specifications.Cryptography.ICertificateHandler)">
            <summary>
            Ensures that settings passed to the function <paramref name="updateFunc"/> are up to date and that
            multiple threads can not change the settings while a thread has entered this method.
            </summary>
            <param name="updateFunc">A function that takes the current settings and that returns the changed settings that should get stored.</param>
            <param name="CertificateHandler">Must be set when confidential information should get decrypted.
            (When the Aes key or iv gets set for example)</param>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.ISettingsManager.DeleteSettings">
            <summary>
            Deletes the stored application settings.
            </summary>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Managers.ITunnelManager">
            <summary>
            Handles connections from the wan (peer to peer connections and TURN
            (Traversal Using Relays around NAT) connections over the external server)
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.ITunnelManager.OpenPeerToPeerListenerService(System.Threading.CancellationToken,System.Net.IPEndPoint)">
            <summary>
            Listens on a specific port. Relays all incoming packages to the local relay manager.
            Used when a public port was opened successfully.
            </summary>
            <param name="cancellationToken">Cancellation token to stop this relay service.</param>
            <param name="localEndPoint">Local end point where the public port relays all its received packages to.</param>
            <returns>True, when the listener is listening on the <paramref name="localEndPoint"/>.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.ITunnelManager.OpenExternalServerRelayTunnel(System.Threading.CancellationToken,System.Guid)">
            <summary>
            Opens a connections to the external server with a specific <paramref name="tunnelId"/>.
            Relays all incoming packages to the local relay manager.
            </summary>
            <param name="cancellationToken">Cancellation token to stop this relay service.</param>
            <param name="tunnelId">Id for the external server logic. (For whom this connection was made)</param>
            <returns>True, when a connection to the external server could be established.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.ITunnelManager.Stop">
            <summary>
            Stops local relay services or disposes internal resources.
            </summary>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Managers.IWanManager">
            <summary>
            Handles connection requests from the WAN by keeping a connection to the external server alive.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.IWanManager.Start">
            <summary>
            Starts a connection to the external server and handling incoming connection requests.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.IWanManager.Stop">
            <summary>
            Stops handling connection requests from the wan and closes the connection to the external server.
            </summary>
            <returns>A task that represents an asynchronous operation.</returns>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Managers.IWateringManager">
            <summary>
            Class that manages what modules need more water and when to irrigate.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.IWateringManager.IsWateringNeccessary">
            <summary>
            Collects measurements from all sensor modules and decides which valves should get opened.
            </summary>
            <returns>A task that represents an asynchronous operation. The value of the TResult
            parameter contains a list with irrigation information.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.IWateringManager.StartWatering(GardeningSystem.Common.Models.Entities.IrrigationInfo)">
            <summary>
            Starts irrigating by opening the valve specified in <paramref name="irrigationInfo"/> for a specific time.
            </summary>
            <param name="irrigationInfo">Irrigation information got from IsWateringNeccessary().</param>
            <returns>A task that represents an asynchronous operation.</returns>
            <seealso cref="M:GardeningSystem.Common.Specifications.Managers.IWateringManager.IsWateringNeccessary"/>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Managers.IWateringManager.ManualOverride(System.Boolean,System.Nullable{System.TimeSpan})">
            <summary>
            Stops current watering tasks and overrides them with a specific setting.
            </summary>
            <param name="activateWatering">True to start wartering.</param>
            <param name="irrigationTimeSpan">Time the valve should stay open. Can also be null.</param>
            <returns>A task that represents an asynchronous operation. The value of the TResult
            parameter contains a boolean that is true when all valves got successfully set to the new task.</returns>
        </member>
        <member name="P:GardeningSystem.Common.Specifications.Managers.IWateringManager.AutomaticIrrigationEnabled">
            <summary>
            Gets if the automatic irrigation algorithm is currently activated.
            </summary>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Repositories.DB.ISensorDataDbRepository">
            <summary>
            Repository that saves and loads ModuleData objects in an table in the database.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Repositories.DB.ISensorDataDbRepository.AddDataPoint(GardeningSystem.Common.Models.Entities.ModuleData)">
            <summary>
            Saves a new data point.
            </summary>
            <param name="data">Datapoint to save.</param>
            <returns>A task that represents the asynchronous save operation. The task result contains
            a boolean that is true, when the operation got completed successfully.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Repositories.DB.ISensorDataDbRepository.RemoveDataPoint(GardeningSystem.Common.Models.Entities.ModuleData)">
            <summary>
            Deletes a already saved data point.
            </summary>
            <param name="data">Datapoint to remove.</param>
            <returns>A task that represents the asynchronous remove operation. The task result contains
            a boolean that is true, when the operation got completed successfully.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Repositories.DB.ISensorDataDbRepository.GetAllDataPoints">
            <summary>
            Gets all stored data points from the database table.
            </summary>
            <returns>A task that represents the asynchronous get operation. The task result contains
            a list with all entires of the database table.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Repositories.DB.ISensorDataDbRepository.QueryDataPointsById(System.Guid)">
            <summary>
            Gets all stored data points that have the same sensor id. (ModuleData.Id)
            </summary>
            <param name="Id">Id of the sensor.</param>
            <returns>A task that represents the asynchronous save operation. The task result contains
            a list of all table entries that have the same sensor id as <paramref name="Id"/>.</returns>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Repositories.ICertificateRepository">
            <summary>
            Repository that stores/creates and loads certificates.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Repositories.ICertificateRepository.GetCertificate(System.String)">
            <summary>
            Gets a certificate from X509Store or from the internal cache.
            Reloads a cached certificate after 5 days.
            </summary>
            <param name="certThumbprint">Thumbprint of the certificate.</param>
            <returns>A X509 certificate that contains also it's private key.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Repositories.ICertificateRepository.CreateSelfSignedCertificate(System.String)">
            <summary>
            Creates a self-signed X509 certificate and stores it safely.
            </summary>
            <returns>A X509 certificate that contains also it's private key.</returns>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Repositories.IFileRepository">
            <summary>
            
            </summary>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Repositories.IModulesRepository">
            <summary>
            Repository that saves/loads modules to/from a hard disk.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Repositories.IModulesRepository.GetAllRegisteredModules">
            <summary>
            Gets all register modules.
            </summary>
            <returns>All stored modules.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Repositories.IModulesRepository.GetModuleById(System.Guid)">
            <summary>
            Gets a module by it's id.
            </summary>
            <param name="id">Id of the module.</param>
            <returns>Null when there is no stored module with the provided <paramref name="id"/>.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Repositories.IModulesRepository.AddModule(GardeningSystem.Common.Models.DTOs.ModuleInfoDto)">
            <summary>
            Saves a new module.
            </summary>
            <param name="module">ModuleInfo without a internal storage id (ModuleInfo.Id).</param>
            <returns>ModuleInfo object containing the module information and the internal storage id (ModuleInfo.Id).</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Repositories.IModulesRepository.RemoveModule(System.Guid)">
            <summary>
            Deletes an existing module.
            </summary>
            <param name="moduleId">Id of the existing module.</param>
            <returns>True when the module was found and successfully deleted.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Repositories.IModulesRepository.UpdateModule(GardeningSystem.Common.Models.Entities.ModuleInfo)">
            <summary>
            Updates an existing module.
            </summary>
            <param name="module">Updated module with the same ModuleInfo.Id as the stored one.</param>
            <returns>True when the module was found and successfully updated.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Repositories.IModulesRepository.GetIdFromModuleId(System.Byte)">
            <summary>
            Gets the Id of a module by it's external module Id (ModuleInfo.ModuleId).
            </summary>
            <param name="moduleId">External module id</param>
            <returns>Internal id of the module.</returns>
        </member>
        <member name="T:GardeningSystem.Common.Specifications.Repositories.ISerializedFileRepository`1">
            <summary>
            Class to save/load one or multiple objects in/from a file.
            </summary>
            <typeparam name="T">Type of the object/objects.</typeparam>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Repositories.ISerializedFileRepository`1.Init(System.String)">
            <summary>
            Sets the fileName or path of an file, where the objects get/are stored in.
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Repositories.ISerializedFileRepository`1.AppendToFileList(`0)">
            <summary>
            Adds an object to multiple objects stored in a file.
            </summary>
            <param name="o">Object to add.</param>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Repositories.ISerializedFileRepository`1.ReadListFromFile">
            <summary>
            Reads all objects from the file.
            </summary>
            <returns>List of objects of with type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Repositories.ISerializedFileRepository`1.WriteListToFile(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Writes multiple objects to the file.
            Does not append them. Overrides the hole file.
            </summary>
            <param name="objects"></param>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Repositories.ISerializedFileRepository`1.RemoveItemFromFileList(System.Guid)">
            <summary>
            Removes a object from the file.
            </summary>
            <param name="Id">Id of the item to remove.</param>
            <returns>True when one or more items got removed.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Repositories.ISerializedFileRepository`1.UpdateItemFromList(`0)">
            <summary>
            Updates an item.
            </summary>
            <param name="itemToUpdate">Updated item</param>
            <returns>False if not found, otherwise true.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Repositories.ISerializedFileRepository`1.WriteSingleObjectToFile``1(``0)">
            <summary>
            Writes an object to the file.
            Overrides the file.
            </summary>
            <typeparam name="T2">Type of the object to store.</typeparam>
            <param name="o">Object that should get stored.</param>
        </member>
        <member name="M:GardeningSystem.Common.Specifications.Repositories.ISerializedFileRepository`1.ReadSingleObjectFromFile``1">
            <summary>
            Reads an object of the file.
            </summary>
            <typeparam name="T2">Type of the object to load.</typeparam>
            <returns>Deserialized object.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Utilities.CommunicationUtils.ConnectAsync(System.Net.Sockets.Socket,System.Net.IPEndPoint,System.Int32)">
            <summary>
            
            </summary>
            <param name="client">Socket</param>
            <param name="remoteEndPoint">Endpoint to connect to.</param>
            <param name="connectTimeout">Timeout in milliseconds. If 0 or less -> no timeout.</param>
            <returns></returns>
        </member>
        <member name="M:GardeningSystem.Common.Utilities.CryptoUtils.ObfuscateAndFreeMemory(GardeningSystem.Common.Models.Entities.PointerLengthPair)">
            <summary>
            https://docs.microsoft.com/en-us/dotnet/api/system.io.unmanagedmemorystream?view=net-5.0
            </summary>
            <param name="memIntPtr">Pointer to the unmanaged memory</param>
            <param name="length">Length of memory</param>
        </member>
        <member name="M:GardeningSystem.Common.Utilities.CryptoUtils.MoveDataToUnmanagedMemory(System.Byte[])">
            <summary>
            Writes a byte array to unmanaged memory and obfuscates the original byte array.
            </summary>
            <param name="data"></param>
            <returns>Pointer to the unmanaged memory.</returns>
        </member>
        <member name="M:GardeningSystem.Common.Utilities.CryptoUtils.ObfuscateByteArray(System.Byte[],System.Nullable{System.Runtime.InteropServices.GCHandle})">
            <summary>
            Overwrites a byte array with random bytes.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Utilities.CryptoUtils.GetByteArrayFromUM(System.Byte[]@,GardeningSystem.Common.Models.Entities.PointerLengthPair)">
            <summary>
            Returns stored byte[] from intPtr.
            Does not delete the unmanaged memory.
            </summary>
            <param name="result">array to store the data in</param>
            <param name="intPtr">pointer pointing to the unmanaged memory</param>
            <param name="length">length of data</param>
            <returns>
            GCHandle of <paramref name="result"/>.
            (Result get's pinned to avoid that the garbage collector copies/moves the object to another place in memory)
            </returns>
        </member>
        <member name="F:GardeningSystem.Common.Utilities.TimeUtils.ApplicationStartTime">
            <summary>
            Gets set in Program.cs, when the application gets started.
            </summary>
        </member>
        <member name="M:GardeningSystem.Common.Utilities.TimeUtils.GetSeason">
            <summary>
            Gets the seasons of the year.
            </summary>
            <returns>
            0 = spring,
            1 = summer,
            2 = fall,
            3 = winter
            </returns>
        </member>
    </members>
</doc>
