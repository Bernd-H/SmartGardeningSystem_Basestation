<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GardeningSystem.BusinessLogic</name>
    </assembly>
    <members>
        <member name="T:GardeningSystem.BusinessLogic.Cryptography.AesEncrypterDecrypter">
            <inheritdoc/>
        </member>
        <member name="F:GardeningSystem.BusinessLogic.Cryptography.AesEncrypterDecrypter.KEY_SIZE">
            <summary>
            Key size in bytes.
            </summary>
        </member>
        <member name="F:GardeningSystem.BusinessLogic.Cryptography.AesEncrypterDecrypter.IV_SIZE">
            <summary>
            IV size in bytes
            </summary>
        </member>
        <member name="F:GardeningSystem.BusinessLogic.Cryptography.AesEncrypterDecrypter.CertificateHandler">
            <summary>
            Necessary to access the aes key stored in the application settings.
            </summary>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Cryptography.AesEncrypterDecrypter.DecryptToByteArray(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Cryptography.AesEncrypterDecrypter.EncryptByteArray(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Cryptography.AesEncrypterDecrypter.GetServerAesKey">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.BusinessLogic.Cryptography.CertificateHandler">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Cryptography.CertificateHandler.CheckForCertificateUpdate">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Cryptography.CertificateHandler.Setup">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Cryptography.CertificateHandler.GetCurrentServerCertificate">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Cryptography.CertificateHandler.GetPublicServerCertificate">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Cryptography.CertificateHandler.DecryptData(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Cryptography.CertificateHandler.EncryptData(GardeningSystem.Common.Models.Entities.PointerLengthPair)">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.BusinessLogic.Cryptography.PasswordHasher">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Cryptography.PasswordHasher.HashPassword(System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Cryptography.PasswordHasher.VerifyHashedPassword(System.String,System.Byte[])">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.BusinessLogic.DevelopmentSetuper">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.DevelopmentSetuper.SetupTestEnvironment">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.BusinessLogic.LoggerService">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.LoggerService.GetLogger``1">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.BusinessLogic.Managers.AesKeyExchangeManager">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.AesKeyExchangeManager.StartListener">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.AesKeyExchangeManager.Stop">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.BusinessLogic.Managers.APIManager">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.APIManager.GetToken">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.APIManager.GetWeatherForecast(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.APIManager.UpdateIPStatus(GardeningSystem.Common.Models.DTOs.IPStatusDto)">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.BusinessLogic.Managers.CommandManager">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.CommandManager.Start">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.CommandManager.Stop">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.BusinessLogic.Managers.LocalMobileAppDiscoveryManager">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.LocalMobileAppDiscoveryManager.Start">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.LocalMobileAppDiscoveryManager.Stop">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.BusinessLogic.Managers.LocalRelayManager">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.LocalRelayManager.MakeTcpRequest(System.Byte[],System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.LocalRelayManager.MakeAPIRequest(System.Byte[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.BusinessLogic.Managers.ModuleManager">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.ModuleManager.CloseValve(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.ModuleManager.OpenValve(System.Guid,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.ModuleManager.OpenValve(System.Byte,System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.ModuleManager.GetAllMeasurements">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.ModuleManager.DiscoverANewModule">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.ModuleManager.GetAllModules">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.ModuleManager.GetModuleById(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.ModuleManager.RemoveModule(System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.ModuleManager.UpdateModule(GardeningSystem.Common.Models.DTOs.ModuleInfoDto)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.ModuleManager.GetModule(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.ModuleManager.sendCommand_retryRetoute(GardeningSystem.Common.Models.DTOs.ModuleInfoDto,System.Func{System.Threading.Tasks.Task{System.Boolean}},System.Boolean)">
            <summary>
            Executes a command. Retrys it one time if failed and trys to reroute the module.
            </summary>
            <param name="module">Info of the module the command is for.</param>
            <param name="sendCommandCallback">Callback where the command gets called.</param>
            <param name="alreadyRerouted">True to not try to reroute the module.</param>
            <returns>Result of the command.</returns>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.ModuleManager.sendCommand_retryRetoute(GardeningSystem.Common.Models.DTOs.ModuleInfoDto,System.Func{System.Threading.Tasks.Task{GardeningSystem.Common.Models.Entities.RfCommunicatorResult}},System.Boolean)">
            <summary>
            Executes a command. Retrys it one time if failed and trys to reroute the module.
            </summary>
            <param name="module">Info of the module the command is for.</param>
            <param name="sendCommandCallback">Callback where the command gets called.</param>
            <param name="alreadyRerouted">True to not try to reroute the module.</param>
            <returns>Result of the command.</returns>
        </member>
        <member name="T:GardeningSystem.BusinessLogic.Managers.SettingsManager">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.SettingsManager.GetApplicationSettings(GardeningSystem.Common.Specifications.Cryptography.ICertificateHandler)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.SettingsManager.UpdateCurrentSettings(System.Func{GardeningSystem.Common.Models.DTOs.ApplicationSettingsDto,GardeningSystem.Common.Models.DTOs.ApplicationSettingsDto},GardeningSystem.Common.Specifications.Cryptography.ICertificateHandler)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.SettingsManager.DeleteSettings">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.BusinessLogic.Managers.TunnelManager">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.TunnelManager.OpenExternalServerRelayTunnel(System.Threading.CancellationToken,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.TunnelManager.OpenPeerToPeerListenerService(System.Threading.CancellationToken,System.Net.IPEndPoint)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.TunnelManager.Stop">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.BusinessLogic.Managers.WanManager">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.WanManager.Start">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.WanManager.Stop">
            <inheritdoc/>
        </member>
        <member name="T:GardeningSystem.BusinessLogic.Managers.WateringManager">
            <inheritdoc/>
        </member>
        <member name="F:GardeningSystem.BusinessLogic.Managers.WateringManager.MinTimeDistanceBetweenTwoIrrigations">
            <summary>
            Key = season of the year
            Value = MinTimeDistanceBetweenTwoIrrigations
            </summary>
        </member>
        <member name="P:GardeningSystem.BusinessLogic.Managers.WateringManager.AutomaticIrrigationEnabled">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.WateringManager.IsWateringNeccessary">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.WateringManager.StartWatering(GardeningSystem.Common.Models.Entities.IrrigationInfo)">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.WateringManager.ManualOverwrite(System.Boolean,System.Nullable{System.TimeSpan})">
            <inheritdoc/>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.WateringManager.irrigationAlgo(GardeningSystem.Common.Models.Entities.ModuleInfo,GardeningSystem.Common.Models.Entities.WeatherData)">
            <summary>
            Determines if plants near a sensor needs to be irrigated.
            </summary>
            <param name="moduleData">Sensor module data.</param>
            <param name="weatherData">Weather forecast for the next day and weather data of the previous day.</param>
            <returns>The timespan the valves associated to this sensor should stay open.</returns>
        </member>
        <member name="M:GardeningSystem.BusinessLogic.Managers.WateringManager.getAverageMeasurmentsFromDay``1(System.Collections.Generic.IEnumerable{GardeningSystem.Common.Models.Entities.ValueTimePair{``0}},System.Int32,System.Int32)">
            <summary>
            Calculates the average of <paramref name="measurementsPerDay"/> values from the end of a list.
            </summary>
            <typeparam name="T">A primitive data type.</typeparam>
            <param name="data"></param>
            <param name="day">0 for the average of measurements from the last day, 1 for measurements the day before the last day and so on...</param>
            <param name="measurementsPerDay">Number of measurements per day.</param>
            <returns>Average</returns>
        </member>
    </members>
</doc>
